-- ####################### CREATING DATABASE ######################
-- DROP DATABASE matrimonial_site;

CREATE DATABASE MATRIMONIAL_SITE;

USE MATRIMONIAL_SITE;

-- ####################### CREATING TABLES ########################

CREATE TABLE PERSON(
	USER_ID INT NOT NULL UNIQUE AUTO_INCREMENT,
    PASS VARCHAR(30) NOT NULL,
	FIRST_NAME VARCHAR(30) NOT NULL,
	LAST_NAME VARCHAR(30) NOT NULL,
	RELIGION VARCHAR(30),
	HEIGHT_IN_CM INT NOT NULL ,
	GENDER TINYINT ,
	NRI TINYINT,
	EDUCATION VARCHAR(30) NOT NULL,
	DOB DATE NOT NULL ,
	JOB VARCHAR(40) NOT NULL,
    SALARY INT NOT NULL,
	CHECK (HEIGHT_IN_CM>=0 AND NRI>=0 AND NRI<=1 AND GENDER>=0 AND GENDER<=1 AND SALARY >= 0),
	PRIMARY KEY(USER_ID)
);

CREATE TABLE MATCHES(
	MAIN_USER INT NOT NULL,
    MATCHED_USER INT NOT NULL,
	PERCENTAGE_MATCH INT NOT NULL,
	CHECK(PERCENTAGE_MATCH >= 0 AND PERCENTAGE_MATCH<=100),
	PRIMARY KEY(MAIN_USER , MATCHED_USER),
	FOREIGN KEY (MAIN_USER) REFERENCES PERSON(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (MATCHED_USER) REFERENCES PERSON(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE OPTIONAL_PREF(
	USER_ID INT NOT NULL UNIQUE,
    LOWER_SALARY INT NOT NULL,
    UPPER_SALARY INT NOT NULL,
    LOWER_AGE INT NOT NULL,
    UPPER_AGE INT NOT NULL,
    CHECK ( LOWER_AGE >= 0 AND UPPER_AGE >= LOWER_AGE AND  LOWER_SALARY >= 0 AND UPPER_SALARY >= LOWER_SALARY),
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES PERSON (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MUST_PREF(
	USER_ID INT NOT NULL UNIQUE,
    NRI TINYINT NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES PERSON (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(USER_ID)
);

CREATE TABLE MUST_PREF_RELIGION(
	USER_ID INT NOT NULL ,
    RELIGION VARCHAR(30) NOT NULL ,
    FOREIGN KEY (USER_ID) REFERENCES PERSON (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (USER_ID,RELIGION)
);

CREATE TABLE CONTACT(
	USER_ID INT NOT NULL UNIQUE,
    ADDRESS VARCHAR(30) NOT NULL,
    EMAIL_ID VARCHAR(30) NOT NULL ,
    PHONE VARCHAR(10) NOT NULL ,
    FOREIGN KEY (USER_ID) REFERENCES PERSON (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(USER_ID)
);

-- ####################### VIEWING TABLES ########################

SHOW TABLES;

SELECT * FROM PERSON;              -- person(user_id,pass,first_name,last_name,religion,height_in_cm,gender,nri,education,dob,job,salary) 
SELECT * FROM MATCHES;             -- matches(main_user,matched_user,percentage_match)  
SELECT * FROM OPTIONAL_PREF;       -- optional_pref(user_id,lower_salary,upper_salary,lower_age,upper_age)
SELECT * FROM MUST_PREF;           -- must_pref(user_id,nri)
SELECT * FROM MUST_PREF_RELIGION;  -- must_pref_religion(user_id,religion)
SELECT * FROM CONTACT;             -- contact(user_id,address,email_id,phone)    

-- #################### INSERTING DUMMY VALUES ###################

INSERT INTO PERSON VALUES ( 100,'SAMYAK','SAMYAK','BAKLIWAL','JAIN',175,0,0,'BITS PILANI', '2002-08-23' , 'SOFTWARE ENGINEER' , 1500000);
INSERT INTO PERSON VALUES ( 101,'ANSH','ANSH','GUPTA','HINDU',175,0,0,'BITS PILANI', '2002-12-20' , 'SOFTWARE ENGINEER' , 1750000);
INSERT INTO PERSON VALUES ( 102,'MOHIT','MOHIT','MAKWANA','HINDU',160,0,0,'BITS GOA', '2002-02-23' , 'CA' , 2000000 );
INSERT INTO PERSON VALUES ( 103,'ARYAN','ARYAN','CHAVAN','BUDDHISM',170,0,0,'BITS HYDERABAD', '2002-01-15' , 'DANCER' ,3000000);
INSERT INTO PERSON VALUES ( 104,'ADITYA','ADITYA','SHETH','HINDU',167,0,1,'IIT-BOMBAY', '2001-12-19' , 'BUSINESS ANALYST', 2000000);
INSERT INTO PERSON VALUES ( 105,'MANPREET','MANPREET','SINGH','SIKH',174,0,0,'IIT DELHI', '2002-07-21' , 'ARCHITECT PLANNER'  , 2500000);
INSERT INTO PERSON VALUES ( 106,'ANSHIKA','ANSHIKA','JAIN','JAIN',150,1,0,'DTU', '2002-08-13' , 'MODELLING' , 1000000);
INSERT INTO PERSON VALUES ( 107,'TANYA','TANYA','SINGH','HINDU',160,1,0,'IIM-A', '2004-06-03' , 'EVENT MANAGER' , 2000000);
INSERT INTO PERSON VALUES ( 108,'DEEPIKA','DEEPIKA','PADUKONE','HINDU',140,1,0,'NMIMS', '2001-07-21' , 'ACTRESS' , 4000000);
INSERT INTO PERSON VALUES ( 109,'KAREENA','KAREEN','KHAN','MUSLIM',165,1,0,'JNU', '2003-08-23' , 'ACTRESS' , 2000000 );
INSERT INTO PERSON VALUES ( 110,'SHADAN','SHADAN','HUSSAIN','MUSLIM',160,0,1,'JAMIA MILLIA ISLAMIA', '2002-08-23' , 'SOFTWARE ENGINEER' , 1500000);

INSERT INTO CONTACT VALUES ( 100,'2117,SHANKAR BHAWAN' , 'samyak@gmail.com' , '8879481544');
INSERT INTO CONTACT VALUES ( 101,'2117,SHANKAR BHAWAN' , 'ansh@gmail.com' ,   '8879481545');
INSERT INTO CONTACT VALUES ( 102,'2116,SHANKAR BHAWAN' , 'mohit@gmail.com' , '9869481544');
INSERT INTO CONTACT VALUES ( 103,'2117,VYAS BHAWAN' ,   'aryankun@gmail.com' , '8876365644');
INSERT INTO CONTACT VALUES ( 104,'1454,KRISHNA BHAWAN' , 'seth@gmail.com' , '7968486324');
INSERT INTO CONTACT VALUES ( 105,'1636,BUDH BHAWAN' , 'manpreet@gmail.com' , '8876986544');
INSERT INTO CONTACT VALUES ( 106,'2122,MEERA BHAWAN' , 'anshika@gmail.com' , '9879154448');
INSERT INTO CONTACT VALUES ( 107,'1118,MEERA BHAWAN' , 'tanya@gmail.com' , '7948184485');
INSERT INTO CONTACT VALUES ( 108,'7th BUNGALOW,MUMBAI' , 'deepika@gmail.com' , '8188794544');
INSERT INTO CONTACT VALUES ( 109,'9th BUNGALOW MUMBAI' , 'kareena@gmail.com' , '9481548874');
INSERT INTO CONTACT VALUES ( 110,'2221,GANDHI BHAWAN' , 'shadan@gmail.com' , '9979784515');

INSERT INTO MUST_PREF_RELIGION VALUES(100,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(101,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(101,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(102,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(102,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(102,'BUDDHISM');
INSERT INTO MUST_PREF_RELIGION VALUES(103,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(103,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(104,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(104,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(105,'SIKHISM');
INSERT INTO MUST_PREF_RELIGION VALUES(105,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(106,'JAIN');
INSERT INTO MUST_PREF_RELIGION VALUES(106,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(107,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(108,'HINDU');
INSERT INTO MUST_PREF_RELIGION VALUES(109,'MUSLIM');
INSERT INTO MUST_PREF_RELIGION VALUES(110,'MUSLIM');

INSERT INTO OPTIONAL_PREF VALUES ( 100 , 1500000 , 2500000 , 24 , 29);
INSERT INTO OPTIONAL_PREF VALUES ( 101 , 1000000 , 2000000 , 24 , 25);
INSERT INTO OPTIONAL_PREF VALUES ( 102 , 1750000 , 3500000 , 25, 30);
INSERT INTO OPTIONAL_PREF VALUES ( 103 , 1500000 , 2000000 , 23 , 25);
INSERT INTO OPTIONAL_PREF VALUES ( 104 , 1000000 , 1500000 , 26 , 28);
INSERT INTO OPTIONAL_PREF VALUES ( 105 , 1200000 , 2100000 , 24 , 29);
INSERT INTO OPTIONAL_PREF VALUES ( 106 , 5500000 , 6500000 , 24 ,31);
INSERT INTO OPTIONAL_PREF VALUES ( 107 , 2500000 , 4500000 , 24 , 28);
INSERT INTO OPTIONAL_PREF VALUES ( 108 , 1700000 , 6500000 , 28 , 29);
INSERT INTO OPTIONAL_PREF VALUES ( 109 , 1800000 , 8500000 , 22 , 27);
INSERT INTO OPTIONAL_PREF VALUES ( 110 , 1500000 , 2500000 , 24 , 27);

INSERT INTO MUST_PREF VALUES ( 100, 0);
INSERT INTO MUST_PREF VALUES ( 101, 0);
INSERT INTO MUST_PREF VALUES ( 102, 1);
INSERT INTO MUST_PREF VALUES ( 103, 0);
INSERT INTO MUST_PREF VALUES ( 104, 0);
INSERT INTO MUST_PREF VALUES ( 105, 0);
INSERT INTO MUST_PREF VALUES ( 106, 1);
INSERT INTO MUST_PREF VALUES ( 107, 0);
INSERT INTO MUST_PREF VALUES ( 109, 0);
INSERT INTO MUST_PREF VALUES ( 110, 0);

-- ######################## CREATING VIEWS ########################

CREATE VIEW DISPLAY AS
SELECT PERSON.USER_ID, PERSON.FIRST_NAME , PERSON.LAST_NAME ,PERSON.GENDER ,GET_AGE(PERSON.USER_ID) AS AGE, PERSON.SALARY, PERSON.JOB , PERSON.EDUCATION , CONTACT.PHONE , CONTACT.EMAIL_ID
FROM PERSON,CONTACT
WHERE PERSON.USER_ID = CONTACT.USER_ID;

-- DROP VIEW DISPLAY;

SELECT * FROM DISPLAY;

-- ################ CREATING PROCEDURES & FUNCTIONS ###############

DELIMITER $$
CREATE DEFINER = 'root'@'localhost' FUNCTION GET_AGE( ID INT )
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE RETURN_VALUE INT;
	SET RETURN_VALUE = (SELECT FLOOR(DATEDIFF(curdate(),DOB)/ 365.25) AS AGE FROM PERSON WHERE USER_ID = ID) ;
    RETURN RETURN_VALUE;
END$$
DELIMITER ;

-- SELECT GET_AGE(100);

DELIMITER $$
CREATE DEFINER = 'root'@'localhost' FUNCTION MATCH_PERCENT( ID1 INT , ID2 INT)
RETURNS INT
DETERMINISTIC
BEGIN
	DECLARE RETURN_VALUE INT;
    DECLARE EXPECTED_L_SAL INT;
    DECLARE EXPECTED_U_SAL INT;
    DECLARE ACTUAL_SAL INT;
    DECLARE EXPECTED_L_AGE INT;
    DECLARE EXPECTED_U_AGE INT;
    DECLARE ACTUAL_AGE INT;
    SET EXPECTED_L_SAL = (SELECT LOWER_SALARY FROM OPTIONAL_PREF WHERE USER_ID = ID1);
    SET EXPECTED_U_SAL = (SELECT UPPER_SALARY FROM OPTIONAL_PREF WHERE USER_ID = ID1);
    SET EXPECTED_L_AGE = (SELECT LOWER_AGE FROM OPTIONAL_PREF WHERE USER_ID = ID1);
    SET EXPECTED_U_AGE = (SELECT UPPER_AGE FROM OPTIONAL_PREF WHERE USER_ID = ID1);
    SET ACTUAL_AGE = GET_AGE(ID2);
    SET ACTUAL_SAL = (SELECT SALARY FROM PERSON WHERE USER_ID = ID2);
    SET RETURN_VALUE = 33;
    IF ((ACTUAL_SAL >= EXPECTED_L_SAL AND ACTUAL_SAL <= EXPECTED_U_SAL) AND (ACTUAL_AGE >= EXPECTED_L_AGE AND ACTUAL_AGE <= EXPECTED_U_AGE))
		THEN SET RETURN_VALUE = 100;
    ELSEIF ((ACTUAL_SAL >= EXPECTED_L_SAL AND ACTUAL_SAL <= EXPECTED_U_SAL) OR (ACTUAL_AGE >= EXPECTED_L_AGE AND ACTUAL_AGE <= EXPECTED_U_AGE))
		THEN SET RETURN_VALUE = 66;
	END IF;
    RETURN RETURN_VALUE;
END$$
DELIMITER ;

-- SELECT MATCH_PERCENT(100,106);

DELIMITER $$
CREATE DEFINER = 'root'@'localhost' PROCEDURE GET_PROFILE( ID INT )
	READS SQL DATA
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'DISPLAYS PROFILE FOR A GIVEN ID NO.'
BEGIN
	SELECT * FROM DISPLAY WHERE USER_ID = ID;
END$$
DELIMITER ;

-- DROP PROCEDURE GET_PROFILE;

CALL GET_PROFILE(101);

-- DROP PROCEDURE GET_MATCHES;

DELIMITER $$
CREATE DEFINER = 'root'@'localhost' PROCEDURE GET_MATCHES( ID INT )
	READS SQL DATA
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'DISPLAYS POSSIBLE MATCHES FOR A GIVEN ID NO.'
BEGIN
	DECLARE NRI_PREF INT;
    DECLARE GEN INT;
    SET NRI_PREF = (SELECT NRI FROM MUST_PREF WHERE USER_ID = ID);
    SET GEN = (SELECT GENDER FROM PERSON WHERE USER_ID = ID);
	SELECT D.USER_ID,D.FIRST_NAME , D.LAST_NAME ,D.AGE,D.SALARY,D.JOB ,D.EDUCATION ,D.PHONE , D.EMAIL_ID,MATCH_PERCENT(ID,USER_ID) AS MATCH_PERCENTAGE FROM DISPLAY D LEFT JOIN PERSON P USING (USER_ID) WHERE (
    P.NRI = NRI_PREF
    AND 
	(P.GENDER != GEN)
    AND 
    P.RELIGION IN 
    ( SELECT RELIGION FROM MUST_PREF_RELIGION WHERE USER_ID = ID )
    )
    ORDER BY MATCH_PERCENTAGE DESC;
END$$
DELIMITER ;

CALL GET_MATCHES(101);